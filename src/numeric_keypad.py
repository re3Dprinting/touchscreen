import logging
from PyQt5.QtCore import QObject, pyqtSignal
from util.log import tsLogger

class NumericKeypad(QObject, tsLogger):

    # These get converted to bound instance variables
    changed = pyqtSignal(str)
    cleared = pyqtSignal(str)

    # We expect to be passed a user interface object that has a number
    # of pushbutton widgets named w_pushbutton_*, where * is 0-9, .,
    # -, delete, and clear.

    def __init__(self, ui):

        # Initialize our superclass
        super(NumericKeypad, self).__init__()

        # Save a reference to the user interface.
        self.ui = ui

        # Set up logging
        self._logger = logging.getLogger(__name__)
        self._log_d("NumericKeypad __init__()")

        # Connect event handlers to each of the pushbuttons
        ui.w_pushbutton_1.clicked.connect(self.handle_1_touch)
        ui.w_pushbutton_2.clicked.connect(self.handle_2_touch)
        ui.w_pushbutton_3.clicked.connect(self.handle_3_touch)
        ui.w_pushbutton_4.clicked.connect(self.handle_4_touch)
        ui.w_pushbutton_5.clicked.connect(self.handle_5_touch)
        ui.w_pushbutton_6.clicked.connect(self.handle_6_touch)
        ui.w_pushbutton_7.clicked.connect(self.handle_7_touch)
        ui.w_pushbutton_8.clicked.connect(self.handle_8_touch)
        ui.w_pushbutton_9.clicked.connect(self.handle_9_touch)
        ui.w_pushbutton_0.clicked.connect(self.handle_0_touch)
        ui.w_pushbutton_clear.clicked.connect(self.handle_clear_touch)
        ui.w_pushbutton_delete.clicked.connect(self.handle_delete_touch)
        ui.w_pushbutton_decimal.clicked.connect(self.handle_decimal_touch)
        ui.w_pushbutton_negative.clicked.connect(self.handle_negative_touch)

        # Disable the pushbuttons. This is so that the pushbuttons all
        # appear grayed until we're told editing has begun.
        self.setEnabled(False)

        # Set value_str to the empty string as a starting value. If
        # some other starting value is needed, load() can be called.
        self.value_str = ""

        # NOTE: actual_value_str should NEVER be changed by any
        # function except for do_value_change(). Functions that want
        # to change the actual value should change value_str and then
        # call do_value_change()
        self.actual_value_str = ""

    # Load a string as our initial value.
    def load(self, value_str):
        self.actual_value_str = self.value_str = value_str

    # This is where we 'commit' changes to the value string into the
    # actualy value string, and notify the caller. We check to ensure
    # that the value has actually changed, and if it has, we
    # capturethat value, and notify any listeners.

    def do_value_change(self):
        if self.value_str != self.actual_value_str:
            self.actual_value_str = self.value_str
            self.changed.emit(self.actual_value_str)

    # Enable or disable all the widgets.
    def setEnabled(self, value):
        self.ui.w_pushbutton_1.setEnabled(value)
        self.ui.w_pushbutton_2.setEnabled(value)
        self.ui.w_pushbutton_3.setEnabled(value)
        self.ui.w_pushbutton_4.setEnabled(value)
        self.ui.w_pushbutton_5.setEnabled(value)
        self.ui.w_pushbutton_6.setEnabled(value)
        self.ui.w_pushbutton_7.setEnabled(value)
        self.ui.w_pushbutton_8.setEnabled(value)
        self.ui.w_pushbutton_9.setEnabled(value)
        self.ui.w_pushbutton_0.setEnabled(value)
        self.ui.w_pushbutton_decimal.setEnabled(value)
        self.ui.w_pushbutton_negative.setEnabled(value)
        self.ui.w_pushbutton_clear.setEnabled(value)
        self.ui.w_pushbutton_delete.setEnabled(value)

    # Handle events generated by the user touching one of the keypad
    # digits. In each case, we call handle_digit to append the touched
    # digit to the value string.

    def handle_1_touch(self):
        self._log_d("UI: User touched 1")
        self.handle_digit("1")

    # See handle_1_touch
    def handle_2_touch(self):
        self._log_d("UI: User touched 2")
        self.handle_digit("2")

    # See handle_1_touch
    def handle_3_touch(self):
        self._log_d("UI: User touched 3")
        self.handle_digit("3")

    # See handle_1_touch
    def handle_4_touch(self):
        self._log_d("UI: User touched 4")
        self.handle_digit("4")

    # See handle_1_touch
    def handle_5_touch(self):
        self._log_d("UI: User touched 5")
        self.handle_digit("5")

    # See handle_1_touch
    def handle_6_touch(self):
        self._log_d("UI: User touched 6")
        self.handle_digit("6")

    # See handle_1_touch
    def handle_7_touch(self):
        self._log_d("UI: User touched 7")
        self.handle_digit("7")

    # See handle_1_touch
    def handle_8_touch(self):
        self._log_d("UI: User touched 8")
        self.handle_digit("8")

    # See handle_1_touch
    def handle_9_touch(self):
        self._log_d("UI: User touched 9")
        self.handle_digit("9")

    # See handle_1_touch
    def handle_0_touch(self):
        self._log_d("UI: User touched 0")
        if not self.value_str == "0":
            self.handle_digit("0")

    # Handle the case where the user touches "-". We handle this by
    # toggling a "-" at the beginning of the string (thus making the
    # "-" key act like a +/- key on old calculators).
    def handle_negative_touch(self):
        self._log_d("UI: User touched -")

        if "-" in self.value_str:
            # If the value string contains a "-", then delete it by
            # replacing it with an empty string. (Note that we replace
            # any "-" anywhere in the string, in case it has become
            # misformatted.
            self.value_str = self.value_str.replace("-", "")
        else:
            # If the value string does not contain a "-", then prepend
            # a "-" onto the value string.
            self.value_str = "-" + self.value_str

        self.do_value_change()

    def handle_decimal_touch(self):
        self._log_d("UI: User touched .")

        # Handle the case where the user touches ".". We handle
        # this by appending a decimal to the string only if it
        # does not contain a decimal.
        if "." not in self.value_str:

            # As a special case, if the value string is empty when the
            # or contains only a "-" when the user touches ".", then
            # prepend a leading zero.
            if "" == self.value_str or "-" == self.value_str:
                self.handle_digit("0.")
            else:
                self.handle_digit(".")

    def handle_delete_touch(self):
        self._log_d("UI: User touched delete")
        self.value_str = self.value_str[:-1]
        self.do_value_change()

    def handle_clear_touch(self):
        self._log_d("UI: User touched Clear")
        self.cleared.emit(self.actual_value_str)
        pass
    
    def handle_digit(self, digit_str):
        self.value_str = self.value_str + digit_str
        self.do_value_change()
